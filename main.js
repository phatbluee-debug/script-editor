const { app, BrowserWindow, Menu } = require('electron');
const path = require('path');

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 1000,
    minHeight: 600,
    icon: path.join(__dirname, 'icon.ico'),
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      webSecurity: true
    },
    autoHideMenuBar: false,
    title: 'Tr√¨nh So·∫°n K·ªãch B·∫£n',
    backgroundColor: '#1a1a2e'
  });

  mainWindow.loadFile('index.html');

  // T·∫°o menu ti·∫øng Vi·ªát
  const menu = Menu.buildFromTemplate([
    {
      label: 'File',
      submenu: [
        {
          label: 'T·∫°o m·ªõi',
          accelerator: 'Ctrl+N',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.createNewScript && window.createNewScript()');
          }
        },
        {
          label: 'L∆∞u',
          accelerator: 'Ctrl+S',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.saveScript && window.saveScript()');
          }
        },
        { type: 'separator' },
        {
          label: 'Xu·∫•t file',
          accelerator: 'Ctrl+E',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.exportScript && window.exportScript()');
          }
        },
        { type: 'separator' },
        {
          label: 'Tho√°t',
          accelerator: 'Ctrl+Q',
          click: () => app.quit()
        }
      ]
    },
    {
      label: 'Ch·ªânh s·ª≠a',
      submenu: [
        { role: 'undo', label: 'Ho√†n t√°c' },
        { role: 'redo', label: 'L√†m l·∫°i' },
        { type: 'separator' },
        { role: 'cut', label: 'C·∫Øt' },
        { role: 'copy', label: 'Sao ch√©p' },
        { role: 'paste', label: 'D√°n' },
        { type: 'separator' },
        { role: 'selectAll', label: 'Ch·ªçn t·∫•t c·∫£' }
      ]
    },
    {
      label: 'Xem',
      submenu: [
        { role: 'reload', label: 'T·∫£i l·∫°i' },
        { role: 'forceReload', label: 'T·∫£i l·∫°i (Force)' },
        { role: 'toggleDevTools', label: 'C√¥ng c·ª• Developer' },
        { type: 'separator' },
        { role: 'resetZoom', label: 'Zoom m·∫∑c ƒë·ªãnh' },
        { role: 'zoomIn', label: 'Ph√≥ng to' },
        { role: 'zoomOut', label: 'Thu nh·ªè' },
        { type: 'separator' },
        { role: 'togglefullscreen', label: 'To√†n m√†n h√¨nh' }
      ]
    },
    {
      label: 'C·ª≠a s·ªï',
      submenu: [
        { role: 'minimize', label: 'Thu nh·ªè' },
        { role: 'close', label: 'ƒê√≥ng' }
      ]
    },
    {
      label: 'Tr·ª£ gi√∫p',
      submenu: [
        {
          label: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng',
          click: () => {
            mainWindow.webContents.executeJavaScript(`
              alert('H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:\\n\\n1. Nh·∫•n "M·ªõi" ƒë·ªÉ t·∫°o k·ªãch b·∫£n m·ªõi\\n2. Nh·∫•n "L∆∞u" (Ctrl+S) ƒë·ªÉ l∆∞u k·ªãch b·∫£n\\n3. Nh·∫•n "Xu·∫•t" (Ctrl+E) ƒë·ªÉ xu·∫•t file\\n4. S·ª≠ d·ª•ng microphone ƒë·ªÉ ghi √¢m l·ªùi tho·∫°i\\n5. T·∫£i file audio l√™n cho m·ªói ƒëo·∫°n h·ªôi tho·∫°i');
            `);
          }
        },
        { type: 'separator' },
        {
          label: 'V·ªÅ ·ª©ng d·ª•ng',
          click: () => {
            const aboutWindow = new BrowserWindow({
              width: 500,
              height: 400,
              resizable: false,
              parent: mainWindow,
              modal: true,
              autoHideMenuBar: true,
              title: 'V·ªÅ ·ª©ng d·ª•ng'
            });
            
            aboutWindow.loadURL(`data:text/html;charset=utf-8,
              <html>
                <head>
                  <style>
                    body {
                      font-family: 'Segoe UI', Arial, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100vh;
                      margin: 0;
                      text-align: center;
                    }
                    h1 {
                      font-size: 32px;
                      margin-bottom: 10px;
                    }
                    p {
                      font-size: 16px;
                      margin: 5px 0;
                    }
                    .version {
                      font-size: 14px;
                      opacity: 0.8;
                      margin-top: 20px;
                    }
                    .icon {
                      font-size: 64px;
                      margin-bottom: 20px;
                    }
                  </style>
                </head>
                <body>
                  <div class="icon">üé¨</div>
                  <h1>Tr√¨nh So·∫°n K·ªãch B·∫£n</h1>
                  <p>·ª®ng d·ª•ng chuy√™n nghi·ªáp cho nh√† bi√™n k·ªãch</p>
                  <p class="version">Version 1.0.0</p>
                  <p class="version">¬© 2025 - All rights reserved</p>
                </body>
              </html>
            `);
          }
        },
        {
          label: 'Ki·ªÉm tra c·∫≠p nh·∫≠t',
          click: () => {
            mainWindow.webContents.executeJavaScript(`
              alert('B·∫°n ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t!');
            `);
          }
        }
      ]
    }
  ]);

  Menu.setApplicationMenu(menu);

  // M·ªü DevTools khi dev (b·ªè comment ƒë·ªÉ debug)
  // mainWindow.webContents.openDevTools();

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
}

// Kh·ªüi ƒë·ªông app
app.whenReady().then(() => {
  createWindow();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Tho√°t khi t·∫•t c·∫£ c·ª≠a s·ªï ƒë√≥ng
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// X·ª≠ l√Ω l·ªói
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
});

app.on('ready', () => {
  console.log('App is ready!');
  console.log('App path:', app.getAppPath());
  console.log('User data path:', app.getPath('userData'));
});
